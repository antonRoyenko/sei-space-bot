generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  wallets      Wallet[]
  telegramId   BigInt        @unique @map("telegram_id")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  notification Notification?
  feed         FeedItem[]
  proposals    ProposalItem[]

  @@map(name: "users")
}

model Notification {
  id                       Int                      @id @default(autoincrement())
  isTwitterSubscribeActive Boolean                  @default(false) @map("is_twitter_subscribe_active")
  isGovActive              Boolean                  @default(false) @map("is_gov_active")
  govTimeSubscription      DateTime?                @map("gov_time_subscription")
  user                     User                     @relation(fields: [userId], references: [id])
  userId                   Int                      @unique @map("user_id")

  @@map(name: "notifications")
}

model FeedItem {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  isShowed  Boolean  @default(false) @map("is_showed")

  @@map(name: "feed_item")
}

model ProposalItem {
  id          Int      @id @default(autoincrement())
  proposalId  String
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @map("user_id")
  isShowed    Boolean  @default(false) @map("is_showed")

  @@map(name: "proposal_item")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  address   String
  name      String?
  network   Network  @relation(fields: [networkId], references: [id])
  networkId Int      @map("network_id")
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  iv        String?

  @@map(name: "wallets")
}

model Network {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  fullName                String                   @map("full_name")
  resource                Resource?                @relation(fields: [resourceId], references: [id])
  resourceId              Int                      @unique @map("resource_id")
  publicUrl               String                   @map("public_url")
  wallet                  Wallet[]

  @@map(name: "networks")
}

model Resource {
  id       Int       @id @default(autoincrement())
  site     String
  discord  String?
  twitter  String
  youtube  String?
  blog     String?
  github   String
  reddit   String?
  telegram String?
  network  Network[]

  @@map(name: "resources")
}
